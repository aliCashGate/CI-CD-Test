// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.cashgate.core.responses.login

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class LoginEntityJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<LoginEntity>() {
  private val options: JsonReader.Options = JsonReader.Options.of("token", "refreshToken", "user")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "token")

  private val userAdapter: JsonAdapter<User> = moshi.adapter(User::class.java, emptySet(), "user")

  public override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("LoginEntity").append(')') }

  public override fun fromJson(reader: JsonReader): LoginEntity {
    var token: String? = null
    var refreshToken: String? = null
    var user: User? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> token = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("token", "token",
            reader)
        1 -> refreshToken = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("refreshToken", "refreshToken", reader)
        2 -> user = userAdapter.fromJson(reader) ?: throw Util.unexpectedNull("user", "user",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return LoginEntity(
        token = token ?: throw Util.missingProperty("token", "token", reader),
        refreshToken = refreshToken ?: throw Util.missingProperty("refreshToken", "refreshToken",
            reader),
        user = user ?: throw Util.missingProperty("user", "user", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: LoginEntity?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("token")
    stringAdapter.toJson(writer, value_.token)
    writer.name("refreshToken")
    stringAdapter.toJson(writer, value_.refreshToken)
    writer.name("user")
    userAdapter.toJson(writer, value_.user)
    writer.endObject()
  }
}
