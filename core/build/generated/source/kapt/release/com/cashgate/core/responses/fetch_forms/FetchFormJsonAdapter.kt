// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.cashgate.core.responses.fetch_forms

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Any
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class FetchFormJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<FetchForm>() {
  private val options: JsonReader.Options = JsonReader.Options.of("categoryId", "fieldExtras",
      "fieldId", "fieldName", "fieldOrder", "fieldRequestType", "fieldSize", "fieldType",
      "fieldValidation", "id", "steps", "fieldValue")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "categoryId")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "fieldExtras")

  private val nullableAnyAdapter: JsonAdapter<Any?> = moshi.adapter(Any::class.java, emptySet(),
      "fieldValue")

  @Volatile
  private var constructorRef: Constructor<FetchForm>? = null

  public override fun toString(): String = buildString(31) {
      append("GeneratedJsonAdapter(").append("FetchForm").append(')') }

  public override fun fromJson(reader: JsonReader): FetchForm {
    var categoryId: Int? = null
    var fieldExtras: String? = null
    var fieldId: String? = null
    var fieldName: String? = null
    var fieldOrder: Int? = null
    var fieldRequestType: String? = null
    var fieldSize: Int? = null
    var fieldType: String? = null
    var fieldValidation: String? = null
    var id: String? = null
    var steps: Int? = null
    var fieldValue: Any? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          categoryId = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          fieldExtras = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          fieldId = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          fieldName = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          fieldOrder = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          fieldRequestType = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          fieldSize = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          fieldType = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          fieldValidation = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          id = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          steps = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          fieldValue = nullableAnyAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffff000.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  FetchForm(
          categoryId = categoryId,
          fieldExtras = fieldExtras,
          fieldId = fieldId,
          fieldName = fieldName,
          fieldOrder = fieldOrder,
          fieldRequestType = fieldRequestType,
          fieldSize = fieldSize,
          fieldType = fieldType,
          fieldValidation = fieldValidation,
          id = id,
          steps = steps,
          fieldValue = fieldValue
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<FetchForm> = this.constructorRef ?:
          FetchForm::class.java.getDeclaredConstructor(Int::class.javaObjectType,
          String::class.java, String::class.java, String::class.java, Int::class.javaObjectType,
          String::class.java, Int::class.javaObjectType, String::class.java, String::class.java,
          String::class.java, Int::class.javaObjectType, Any::class.java,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          categoryId,
          fieldExtras,
          fieldId,
          fieldName,
          fieldOrder,
          fieldRequestType,
          fieldSize,
          fieldType,
          fieldValidation,
          id,
          steps,
          fieldValue,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: FetchForm?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("categoryId")
    nullableIntAdapter.toJson(writer, value_.categoryId)
    writer.name("fieldExtras")
    nullableStringAdapter.toJson(writer, value_.fieldExtras)
    writer.name("fieldId")
    nullableStringAdapter.toJson(writer, value_.fieldId)
    writer.name("fieldName")
    nullableStringAdapter.toJson(writer, value_.fieldName)
    writer.name("fieldOrder")
    nullableIntAdapter.toJson(writer, value_.fieldOrder)
    writer.name("fieldRequestType")
    nullableStringAdapter.toJson(writer, value_.fieldRequestType)
    writer.name("fieldSize")
    nullableIntAdapter.toJson(writer, value_.fieldSize)
    writer.name("fieldType")
    nullableStringAdapter.toJson(writer, value_.fieldType)
    writer.name("fieldValidation")
    nullableStringAdapter.toJson(writer, value_.fieldValidation)
    writer.name("id")
    nullableStringAdapter.toJson(writer, value_.id)
    writer.name("steps")
    nullableIntAdapter.toJson(writer, value_.steps)
    writer.name("fieldValue")
    nullableAnyAdapter.toJson(writer, value_.fieldValue)
    writer.endObject()
  }
}
